### variables | macros ###

// Maximum size of the buffer to be sent or received (in chunks)
#define MAXLINE 1000
// Maximum size of the message to be sent or received
#define MAXMSGSIZE 5000
// The id for the socket type; there is no actual significance to this number; it is just a random number
#define SOCK_MyTCP 100

// 2D char arrays to store the messages to be sent and received in a circular buffer of size 10
char Send_Message[10][MAXMSGSIZE], Recieved_Message[10][MAXMSGSIZE];

// int arrays to store the size of the messages to be sent and received in a circular buffer of size 10
int Send_Message_Size[10], Recieved_Message_Size[10];

// threads for the sender and receiver
pthread_t R, S;

// mutexes for access to the circular buffers
pthread_mutex_t R_Mutex, S_Mutex;

// send_cond is used by thread S to signal my_send function when the prior full buffer has a free slot
// recv_cond_empt is used by thread R to signal my_recv function when the prior empty buffer has a message
// recv_cond_full is used by thread R to signal my_recv function when the prior full buffer has a free slot
pthread_cond_t send_cond, recv_cond_empt, recv_cond_full;

// sr_socket is the socket descriptor which is used to send and receive messages and is only updated when there is a connection or if the connection is closed
// send_counter is the number of items in the send circular buffer
// recv_counter is the number of items in the receive circular buffer
// send_in is the index of the next free slot in the send circular buffer
// send_out is the index of the next slot to be sent in the send circular buffer
// recv_in is the index of the next free slot in the receive circular buffer
// recv_out is the index of the next slot to be received in the receive circular buffer
// all of these variables are only updated by the sender and receiver threads
// these variables along with the mutexes are used to implement the circular buffers as a producer consumer problem
int sr_socket, send_counter, recv_counter, send_in, send_out, recv_in, recv_out;

### functions ###

// just a utility function to find the minimum of two integers
int min(int a, int b)

// setup the circular buffers with condition variables, mutexes and start the sender and receiver threads
int my_socket(int domain, int type, int protocol)

// bind the socket to the given address; just a wrapper around the bind function; returns the status of the bind function; only used by the server
int my_bind(int sockfd, struct sockaddr *addr_ptr, size_t addr_size)
{
    int status = bind(sockfd, addr_ptr, addr_size);
    return status;
}

// listen for connections on the given socket; just a wrapper around the listen function; only used by the server
int my_listen(int sockfd, int client_count)

// accept a connection on the given socket; just a wrapper around the accept function; returns the new socket descriptor and initialises the sr_socket; only used by the server
int my_accept(int sockfd, struct sockaddr* cliaddr, int* clilen)

// connect to the given address; just a wrapper around the connect function; returns the status of the connect function; only used by the client; initialises the sr_socket
int my_connect(int sockfd, struct sockaddr* servaddr, int servlen)

// checks for the connection close condition and closes the socket and terminates the sender and receiver threads
void connection_close_check(int c)

// function for receiver thread
// waits for sr_socket to be initialised by my_connect or my_accept
// first receives the size of the message 
// the message size is encoded in the first 2 bytes of the message as 2 unsigned chars
// checks whether the buffer is full and waits for a free slot if it is full using recv_cond_full conditional variable
// if the buffer is not full or if the condition is signalled, it locks the R_Mutex for the receive buffer
// receives the rest of the message according to the size received in chunks of max size MAXLINE
// stores the message in the receive buffer and increments the recv_counter and recv_in
// unlocks the R_Mutex
// if the buffer was empty before the message was received, it signals the recv_cond_empt conditional variable (to be used by my_recv)
// RThread is a producer
void* RThread(void* arg)

// function for sender thread
// waits for sr_socket to be initialised by my_connect or my_accept
// sleeps and wakes periodically
// locks the S_Mutex for the send buffer
// checks whether there is a message to be sent in the send buffer
// if there isnt, it unlocks the S_Mutex and continues to sleep again
// if there is, it first gets the size of the message to be sent and encodes it
// it sends the size of the message first
// then it sends the message in chunks of max size MAXLINE and unlocks the S_Mutex
// if the buffer was full before the message was sent, it signals the send_cond conditional variable (to be used by my_send)
void* SThread(void* arg)

// send a message to the socket; blocks until a slot is available in the buffer
int my_send(int sockfd, char* msg, int len, int flag)

// receive a message from the socket; blocks until a message is received
int my_recv(int sockfd, char* buf, int len, int flag)

// close the socket and terminate the sender and receiver threads; destroy the mutexes and condition variables
void my_close(int sockfd)

### Flow of Control for my_recv ###
if the sr_socket is not initialised, i.e. my_connect / my_accept has not been called, it just returns -1 as Error
my_recv waits for the recv_cond_empt conditional variable to be signalled by the receiver thread or if the buffer is not empty R_Mutex is locked and the message is received
if the buffer is empty, it waits for the recv_cond_empt conditional variable to be signalled by the receiver thread and once received, it locks the R_Mutex
minimum of the length parameter and the maximum allowed message size is taken as the length of the message to be received
the message is copied from the buffer table into the parameter char pointer buf
if the buffer was full before the message was received, it signals the recv_cond_full conditional variable (to be used by receiver thread)
unlocks the R_Mutex

### Flow of Control for my_send ###
if the sr_socket is not initialised, i.e. my_connect / my_accept has not been called, it just returns -1 as Error
my_send waits for the send_cond conditional variable to be signalled by the sender thread if the send buffer is full; once received it locks the S_Mutex
if the buffer is not full S_Mutex is locked
minimum of the length parameter and the maximum allowed message size is taken as the length of the message to be sent
the message is copied from the parameter char pointer buf into the buffer table
unlocks the S_Mutex
